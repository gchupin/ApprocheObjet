package set;

public abstract class BinaryTree implements IBinaryTree 
{
	//========Donn√©es membres========
	private Object data;
	private BinaryTree leftChild, rightChild;

	//========Constructeurs===========
	public BinaryTree(Object data, BinaryTree leftChild, BinaryTree rightChild) 
	{
		this.data = data;
		this.leftChild = leftChild;
		this.rightChild = rightChild;
	}

	public BinaryTree(Object data) 
	{
		this.data = data;
		this.rightChild = null;
		this.leftChild = null;
	}
	
	
	//========Accesseurs=========
	@Override
	public Object getData() 
	{
		return data;
	}

	@Override
	public void setData(Object data) 
	{
		this.data = data;
	}

	@Override
	public IBinaryTree getLeftChild() {
		return leftChild;
	}

	@Override
	public IBinaryTree getRightChild() {
		return rightChild;
	}

	@Override
	public void setLeftChild(IBinaryTree leftChild) {
		this.leftChild = (BinaryTree) leftChild;
	}

	@Override
	public void setRightChild(IBinaryTree rightChild) {
		this.rightChild = (BinaryTree) rightChild;

	}
	
	//==========Other===========
	public String toString()
	{
		if (this.rightChild != null)
		{	
			if(this.leftChild != null)
			{
				return this.data.toString() + "\n" + this.leftChild.toString() + this.rightChild.toString();
			}
			return this.data.toString() + "\n" + this.rightChild.toString();
		}
		if(this.leftChild != null)
		{
			return this.data.toString() + "\n" + this.leftChild.toString();
		}
		return this.data.toString(); 
	}
		
	@Override
	public boolean isLeaf() {
		if (this.rightChild == null && this.leftChild == null)
			return true;
		return false;
	}

	@Override
	public int getHeight() {
		if (this.rightChild != null)
		{
			if(this.leftChild != null)
				return 1 + Math.max(this.rightChild.getHeight(), this.leftChild.getHeight());
			return 1 + this.rightChild.getHeight();
		}
		if(this.leftChild != null)
			return 1 + this.leftChild.getHeight();
		return 0;
	}

	@Override
	public int getNumberNodes() 
	{
		if(this.leftChild != null)
		{
			if (this.rightChild != null)
				return 1 + this.rightChild.getNumberNodes() + this.rightChild.getNumberNodes();
			return 1 + this.leftChild.getNumberNodes();
		}
		if (this.rightChild != null)
			return 1 + this.rightChild.getNumberNodes();
		return 1;
	}
}
		
