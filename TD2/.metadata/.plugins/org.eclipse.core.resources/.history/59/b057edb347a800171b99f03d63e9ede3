package set;

public class BinaryTreeQueue implements IQueue 
{
	
	//===Données membres===
	private BinaryTree [] table;
	private int size;//taille maximale du tableau
	
	//===Constructeur===
	public BinaryTreeQueue (int size)
	{
		this.size = size;
		this.table = new BinaryTree [size];
	}
	
	public void allocate ()
	{
		this.size = size << 1;
		BinaryTree [] newTable = new BinaryTree [this.size];
		System.arraycopy(table, 0, newTable, 0, size);
		table = newTable;
	}
	
	@Override
	public void push_front(Object o) 
	{
		if (this.table[this.size] != null)
			this.allocate();
		System.arraycopy(table, 0, table, 1, size - 1);
		table[0] = (BinaryTree) o;
	}
	
	//On enléve le dernier élément et on met a ça place les deux sous arbres de ces fils
	@Override
	public Object pop_back() 
	{
		Object pop = (BinaryTree) table[this.size()];
		BinaryTree LeftChild = (BinaryTree) table[this.size()].getLeftChild();
		BinaryTree RightChild = (BinaryTree) table[this.size()].getRightChild();
		if(LeftChild != null)
			this.push_front(table[this.size()].getLeftChild());
		if(RightChild !=null)
			this.push_front(table[this.size()].getRightChild());
		table[this.size()] = null;
		return pop;
	}

	@Override
	public boolean empty() 
	{
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() 
	{
		// TODO Auto-generated method stub

	}

	//Nombre d'élément dans le tableau
	@Override
	public int size() 
	{
		int size = 0;
		while (table[size] != null && size < this.size)
			++size;
		return size;
	}

}
